version: '3.8'

services:
  # 主应用服务
  nxlink-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: nxlink-webtools:${TAG:-latest}
    container_name: nxlink-webtools-app
    restart: unless-stopped
    ports:
      - "${GATEWAY_PORT:-8350}:8350"  # 网关端口
      - "${BACKEND_PORT:-8450}:8450"  # 后端端口（生产环境可关闭）
    environment:
      - NODE_ENV=production
      - PORT=${BACKEND_PORT:-8450}
      - BACKEND_PORT=${BACKEND_PORT:-8450}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3010}
      - JWT_SECRET=${JWT_SECRET}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      # OpenAPI配置
      - OPENAPI_ACCESS_KEY=${OPENAPI_ACCESS_KEY}
      - OPENAPI_ACCESS_SECRET=${OPENAPI_ACCESS_SECRET}
      - DOCKER_CONTAINER=true
      - OPENAPI_BIZ_TYPE=${OPENAPI_BIZ_TYPE:-8}
      - OPENAPI_BASE_URL=${OPENAPI_BASE_URL:-https://api-westus.nxlink.ai}
    volumes:
      - ./logs:/app/logs:rw
      - ./server/config:/app/server/config:rw
      - ./uploads:/app/uploads:rw
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8450/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - nxlink-network
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Redis缓存（可选）
  redis:
    image: redis:7-alpine
    container_name: nxlink-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - nxlink-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Nginx反向代理
  nginx:
    image: nginx:1.25-alpine
    container_name: nxlink-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./dist:/usr/share/nginx/html:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - nxlink-app
    networks:
      - nxlink-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 监控服务（可选）
  prometheus:
    image: prom/prometheus:latest
    container_name: nxlink-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - nxlink-network
    profiles:
      - monitoring

  # Grafana监控面板（可选）
  grafana:
    image: grafana/grafana:latest
    container_name: nxlink-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - nxlink-network
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  nxlink-network:
    driver: bridge
    name: nxlink-network
