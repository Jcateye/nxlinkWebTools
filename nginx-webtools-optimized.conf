# IP白名单配置
geo $allowed_ip {
    default 0;
    # 内网IP段
    10.0.0.0/8 1;
    172.16.0.0/12 1;
    192.168.0.0/16 1;
    # 金时数据
    52.82.74.116 1;
    52.82.89.22 1;
    52.82.100.17 1;
    # 深圳办公室
    61.141.64.109 1;
}

# 限流配置
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=general_limit:10m rate=30r/s;

server {
    listen 443 ssl http2;
    server_name WebTools.nxlink.ai;
    
    # IP白名单检查
    if ($allowed_ip = 0) {
        return 403;
    }
    
    # SSL 证书配置
    ssl_certificate /etc/nginx/cert/nxlinkWebTools/WebTools.nxlink.ai.pem;
    ssl_certificate_key /etc/nginx/cert/nxlinkWebTools/WebTools.nxlink.ai.key;
    
    # 增强的SSL安全设置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # 安全头
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https: wss: ws:;" always;
    
    # 根目录和索引文件
    root /var/www/nxlinkWebTools/current/dist;
    index index.html;
    
    # 日志配置
    access_log /var/log/nginx/webtools_access.log;
    error_log /var/log/nginx/webtools_error.log;
    
    # 健康检查（不记录日志）
    location = /health {
        proxy_pass http://localhost:8350;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        access_log off;
    }
    
    # API 请求代理到 Node.js（包含限流）
    location /api/ {
        limit_req zone=api_limit burst=20 nodelay;
        
        proxy_pass http://localhost:8350;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 代理超时设置
        proxy_connect_timeout 30s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # 缓冲设置
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
    }
    
    # 内部API代理（更严格的限流）
    location /internal-api/ {
        limit_req zone=api_limit burst=10 nodelay;
        
        proxy_pass http://localhost:8350;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_connect_timeout 30s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
    
    # 静态资源缓存（优化版）
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp|avif)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        
        # 启用gzip压缩
        gzip_static on;
        
        try_files $uri $uri/ =404;
    }
    
    # 特殊处理manifest和service worker
    location ~* \.(manifest|sw)\.js$ {
        expires 0;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        try_files $uri $uri/ =404;
    }
    
    # 处理前端路由（单页应用）
    location / {
        limit_req zone=general_limit burst=50 nodelay;
        
        try_files $uri $uri/ /index.html;
        
        # HTML文件不缓存
        location ~* \.html$ {
            expires 0;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }
    }
    
    # 禁止访问敏感文件
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ \.(env|log|config)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
}

# HTTP 重定向到 HTTPS
server {
    listen 80;
    server_name WebTools.nxlink.ai;
    
    # IP白名单检查（HTTP也需要）
    if ($allowed_ip = 0) {
        return 403;
    }
    
    return 301 https://$server_name$request_uri;
}