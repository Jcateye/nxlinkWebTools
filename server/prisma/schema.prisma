// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  providers   LLMProvider[]
  prompts     Prompt[]
  testRuns    TestRun[]
  testLogs    TestLog[]

  @@map("users")
}

// LLM厂商配置表
model LLMProvider {
  id          String   @id @default(cuid())
  userId      String
  name        String   // 厂商名称，如 "OpenAI"
  displayName String   // 显示名称，如 "OpenAI GPT"
  category    String   // 厂商分类：北美、亚洲、欧洲、基础设施
  apiKey      String   // API密钥
  baseUrl     String?  // 自定义API端点
  
  // Azure OpenAI 特有字段
  azureEndpoint      String?
  azureApiVersion    String?
  azureDeploymentName String?
  
  // Google Vertex AI 特有字段
  projectId String?
  region    String?
  
  // 其他自定义配置
  customHeaders Json?
  
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  models     LLMModel[]
  testRuns   TestRun[]
  testResults TestResult[]

  @@map("llm_providers")
}

// LLM模型表
model LLMModel {
  id          String   @id @default(cuid())
  providerId  String
  name        String   // 模型名称，如 "gpt-4"
  displayName String   // 显示名称，如 "GPT-4"
  description String?  // 模型描述
  
  // 模型参数
  maxTokens      Int?     // 最大token数
  supportsFunctions Boolean @default(false) // 是否支持函数调用
  supportsVision    Boolean @default(false) // 是否支持视觉
  
  // 成本信息（每1000 tokens）
  inputCost  Decimal? @db.Decimal(10, 6)  // 输入成本
  outputCost Decimal? @db.Decimal(10, 6)  // 输出成本
  
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  provider    LLMProvider   @relation(fields: [providerId], references: [id], onDelete: Cascade)
  testResults TestResult[]

  @@map("llm_models")
}

// 提示词表
model Prompt {
  id           String   @id @default(cuid())
  userId       String
  name         String   // 提示词名称
  description  String?  // 描述
  systemPrompt String?  @db.Text // 系统提示词
  userPrompt   String   @db.Text // 用户提示词
  
  // 变量配置
  variables    Json?    // 提示词中的变量定义
  
  // 分类和标签
  category     String?  // 分类
  tags         Json?    // 标签数组
  
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // 关联关系
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  testRuns    TestRun[]
  testResults TestResult[]

  @@map("prompts")
}

// 测试运行表
model TestRun {
  id          String   @id @default(cuid())
  userId      String
  name        String   // 测试运行名称
  description String?  // 描述
  
  // 测试配置
  selectedProviders String @db.Text // JSON数组，选中的厂商ID
  selectedPrompts   String @db.Text // JSON数组，选中的提示词ID
  testRounds        Int    @default(1) // 测试轮次
  
  // 测试状态
  status      TestStatus @default(PENDING)
  progress    Int        @default(0) // 进度百分比
  
  // 时间统计
  startedAt   DateTime?
  completedAt DateTime?
  duration    Int?       // 持续时间（秒）
  
  // 结果统计
  totalTests     Int @default(0) // 总测试数
  successTests   Int @default(0) // 成功测试数
  failedTests    Int @default(0) // 失败测试数
  averageLatency Int @default(0) // 平均延迟（毫秒）
  totalTokens    Int @default(0) // 总token数
  totalCost      Decimal @default(0) @db.Decimal(10, 6) // 总成本
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  testResults TestResult[]
  testLogs    TestLog[]

  @@map("test_runs")
}

// 测试结果表
model TestResult {
  id         String   @id @default(cuid())
  testRunId  String
  providerId String
  modelId    String
  promptId   String
  
  // 测试输入
  systemPrompt String? @db.Text
  userPrompt   String  @db.Text
  variables    Json?   // 变量值
  round        Int     @default(1) // 测试轮次
  
  // 测试结果
  status       TestResultStatus @default(PENDING)
  response     String?          @db.Text // AI响应
  errorMessage String?          @db.Text // 错误信息
  
  // 性能指标
  latency      Int?     // 响应时间（毫秒）
  inputTokens  Int?     // 输入token数
  outputTokens Int?     // 输出token数
  totalTokens  Int?     // 总token数
  cost         Decimal? @db.Decimal(10, 6) // 成本
  
  // 质量评估
  quality      Int?     // 质量评分（1-10）
  relevance    Int?     // 相关性评分（1-10）
  accuracy     Int?     // 准确性评分（1-10）
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  testRun  TestRun     @relation(fields: [testRunId], references: [id], onDelete: Cascade)
  provider LLMProvider @relation(fields: [providerId], references: [id])
  model    LLMModel    @relation(fields: [modelId], references: [id])
  prompt   Prompt      @relation(fields: [promptId], references: [id])

  @@map("test_results")
}

// 测试日志表
model TestLog {
  id        String   @id @default(cuid())
  testRunId String?  // 可选，关联到测试运行
  userId    String
  sessionId String   // 会话ID
  
  level     LogLevel // 日志级别
  message   String   @db.Text // 日志消息
  details   Json?    // 详细信息
  
  // 上下文信息
  provider  String?  // 厂商名称
  model     String?  // 模型名称
  prompt    String?  // 提示词名称
  round     Int?     // 轮次
  
  createdAt DateTime @default(now())

  // 关联关系
  testRun TestRun? @relation(fields: [testRunId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("test_logs")
}

// 系统配置表
model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique // 配置键
  value String @db.Text // 配置值
  
  description String?  // 配置描述
  category    String?  // 配置分类
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_configs")
}

// 枚举定义
enum TestStatus {
  PENDING   // 等待中
  RUNNING   // 运行中
  COMPLETED // 已完成
  FAILED    // 失败
  STOPPED   // 已停止
}

enum TestResultStatus {
  PENDING   // 等待中
  SUCCESS   // 成功
  FAILED    // 失败
  TIMEOUT   // 超时
}

enum LogLevel {
  DEBUG   // 调试
  INFO    // 信息
  SUCCESS // 成功
  WARNING // 警告
  ERROR   // 错误
} 